/* The following code was generated by JFlex 1.4.3 on 01.02.11 3:31 */

package org.intellij.lang.jflex.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.intellij.lang.jflex.JFlexElementTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 01.02.11 3:31 from the specification file
 * <tt>E:/Work/idea-jflex/src/org/intellij/lang/jflex/lexer/JFlex.flex</tt>
 */
final class _JFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int OPTION = 16;
  public static final int OPT_PARAMS = 22;
  public static final int ACTION_REGEXP_CLASS = 40;
  public static final int IDENTIFIER = 6;
  public static final int OPT_JAVA_CODE = 26;
  public static final int OPT_ERROR = 18;
  public static final int OPT_CODE = 24;
  public static final int IDENTIFIER_REGEXP_LITERAL = 8;
  public static final int IDENTIFIER_REGEXP_CLASS = 14;
  public static final int IDENTIFIER_REGEXP_IDENTIFIER = 12;
  public static final int RULE = 34;
  public static final int OPT_EXCEPTION = 28;
  public static final int ACTION = 42;
  public static final int ACTION_REGEXP = 36;
  public static final int IDENTIFIER_REGEXP = 10;
  public static final int ACTION_JAVA_CODE = 44;
  public static final int STATE = 32;
  public static final int LEXICAL_RULES = 4;
  public static final int ACTION_REGEXP_IDENTIFIER = 38;
  public static final int YYINITIAL = 0;
  public static final int OPTIONS_AND_DECLARATIONS = 2;
  public static final int OPT_BOOLEAN = 30;
  public static final int OPT_PARAM = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\24\1\4\1\3\1\0\1\5\1\2\16\24\4\0\1\4\1\27"+
    "\1\26\1\0\1\23\1\1\2\0\1\35\1\36\1\10\1\30\1\63"+
    "\2\0\1\7\1\24\1\61\4\24\1\62\1\57\1\60\1\24\2\0"+
    "\1\31\1\32\1\64\1\30\1\0\32\23\1\33\1\6\1\37\1\0"+
    "\1\23\1\0\1\21\1\47\1\40\1\45\1\15\1\17\1\54\1\51"+
    "\1\12\1\23\1\56\1\22\1\42\1\13\1\16\1\43\1\23\1\50"+
    "\1\41\1\14\1\46\1\20\1\52\1\44\1\55\1\53\1\25\1\34"+
    "\1\11\1\27\41\24\2\0\4\23\4\0\1\23\2\0\1\24\7\0"+
    "\1\23\4\0\1\23\5\0\27\23\1\0\37\23\1\0\u013f\23\31\0"+
    "\162\23\4\0\14\23\16\0\5\23\11\0\1\23\21\0\130\24\5\0"+
    "\23\24\12\0\1\23\13\0\1\23\1\0\3\23\1\0\1\23\1\0"+
    "\24\23\1\0\54\23\1\0\46\23\1\0\5\23\4\0\202\23\1\0"+
    "\4\24\3\0\105\23\1\0\46\23\2\0\2\23\6\0\20\23\41\0"+
    "\46\23\2\0\1\23\7\0\47\23\11\0\21\24\1\0\27\24\1\0"+
    "\3\24\1\0\1\24\1\0\2\24\1\0\1\24\13\0\33\23\5\0"+
    "\3\23\15\0\4\24\14\0\6\24\13\0\32\23\5\0\13\23\16\24"+
    "\7\0\12\24\4\0\2\23\1\24\143\23\1\0\1\23\10\24\1\0"+
    "\6\24\2\23\2\24\1\0\4\24\2\23\12\24\3\23\2\0\1\23"+
    "\17\0\1\24\1\23\1\24\36\23\33\24\2\0\3\23\60\0\46\23"+
    "\13\24\1\23\u014f\0\3\24\66\23\2\0\1\24\1\23\20\24\2\0"+
    "\1\23\4\24\3\0\12\23\2\24\2\0\12\24\21\0\3\24\1\0"+
    "\10\23\2\0\2\23\2\0\26\23\1\0\7\23\1\0\1\23\3\0"+
    "\4\23\2\0\1\24\1\23\7\24\2\0\2\24\2\0\3\24\11\0"+
    "\1\24\4\0\2\23\1\0\3\23\2\24\2\0\12\24\4\23\15\0"+
    "\3\24\1\0\6\23\4\0\2\23\2\0\26\23\1\0\7\23\1\0"+
    "\2\23\1\0\2\23\1\0\2\23\2\0\1\24\1\0\5\24\4\0"+
    "\2\24\2\0\3\24\13\0\4\23\1\0\1\23\7\0\14\24\3\23"+
    "\14\0\3\24\1\0\11\23\1\0\3\23\1\0\26\23\1\0\7\23"+
    "\1\0\2\23\1\0\5\23\2\0\1\24\1\23\10\24\1\0\3\24"+
    "\1\0\3\24\2\0\1\23\17\0\2\23\2\24\2\0\12\24\1\0"+
    "\1\23\17\0\3\24\1\0\10\23\2\0\2\23\2\0\26\23\1\0"+
    "\7\23\1\0\2\23\1\0\5\23\2\0\1\24\1\23\6\24\3\0"+
    "\2\24\2\0\3\24\10\0\2\24\4\0\2\23\1\0\3\23\4\0"+
    "\12\24\1\0\1\23\20\0\1\24\1\23\1\0\6\23\3\0\3\23"+
    "\1\0\4\23\3\0\2\23\1\0\1\23\1\0\2\23\3\0\2\23"+
    "\3\0\3\23\3\0\10\23\1\0\3\23\4\0\5\24\3\0\3\24"+
    "\1\0\4\24\11\0\1\24\17\0\11\24\11\0\1\23\7\0\3\24"+
    "\1\0\10\23\1\0\3\23\1\0\27\23\1\0\12\23\1\0\5\23"+
    "\4\0\7\24\1\0\3\24\1\0\4\24\7\0\2\24\11\0\2\23"+
    "\4\0\12\24\22\0\2\24\1\0\10\23\1\0\3\23\1\0\27\23"+
    "\1\0\12\23\1\0\5\23\2\0\1\24\1\23\7\24\1\0\3\24"+
    "\1\0\4\24\7\0\2\24\7\0\1\23\1\0\2\23\4\0\12\24"+
    "\22\0\2\24\1\0\10\23\1\0\3\23\1\0\27\23\1\0\20\23"+
    "\4\0\6\24\2\0\3\24\1\0\4\24\11\0\1\24\10\0\2\23"+
    "\4\0\12\24\22\0\2\24\1\0\22\23\3\0\30\23\1\0\11\23"+
    "\1\0\1\23\2\0\7\23\3\0\1\24\4\0\6\24\1\0\1\24"+
    "\1\0\10\24\22\0\2\24\15\0\60\23\1\24\2\23\7\24\4\0"+
    "\10\23\10\24\1\0\12\24\47\0\2\23\1\0\1\23\2\0\2\23"+
    "\1\0\1\23\2\0\1\23\6\0\4\23\1\0\7\23\1\0\3\23"+
    "\1\0\1\23\1\0\1\23\2\0\2\23\1\0\4\23\1\24\2\23"+
    "\6\24\1\0\2\24\1\23\2\0\5\23\1\0\1\23\1\0\6\24"+
    "\2\0\12\24\2\0\2\23\42\0\1\23\27\0\2\24\6\0\12\24"+
    "\13\0\1\24\1\0\1\24\1\0\1\24\4\0\2\24\10\23\1\0"+
    "\42\23\6\0\24\24\1\0\2\24\4\23\4\0\10\24\1\0\44\24"+
    "\11\0\1\24\71\0\42\23\1\0\5\23\1\0\2\23\1\0\7\24"+
    "\3\0\4\24\6\0\12\24\6\0\6\23\4\24\106\0\46\23\12\0"+
    "\51\23\7\0\132\23\5\0\104\23\5\0\122\23\6\0\7\23\1\0"+
    "\77\23\1\0\1\23\1\0\4\23\2\0\7\23\1\0\1\23\1\0"+
    "\4\23\2\0\47\23\1\0\1\23\1\0\4\23\2\0\37\23\1\0"+
    "\1\23\1\0\4\23\2\0\7\23\1\0\1\23\1\0\4\23\2\0"+
    "\7\23\1\0\7\23\1\0\27\23\1\0\37\23\1\0\1\23\1\0"+
    "\4\23\2\0\7\23\1\0\47\23\1\0\23\23\16\0\11\24\56\0"+
    "\125\23\14\0\u026c\23\2\0\10\23\12\0\32\23\5\0\113\23\3\0"+
    "\3\23\17\0\15\23\1\0\4\23\3\24\13\0\22\23\3\24\13\0"+
    "\22\23\2\24\14\0\15\23\1\0\3\23\1\0\2\24\14\0\64\23"+
    "\40\24\3\0\1\23\3\0\2\23\1\24\2\0\12\24\41\0\3\24"+
    "\2\0\12\24\6\0\130\23\10\0\51\23\1\24\126\0\35\23\3\0"+
    "\14\24\4\0\14\24\12\0\12\24\36\23\2\0\5\23\u038b\0\154\23"+
    "\224\0\234\23\4\0\132\23\6\0\26\23\2\0\6\23\2\0\46\23"+
    "\2\0\6\23\2\0\10\23\1\0\1\23\1\0\1\23\1\0\1\23"+
    "\1\0\37\23\2\0\65\23\1\0\7\23\1\0\1\23\3\0\3\23"+
    "\1\0\7\23\3\0\4\23\2\0\6\23\4\0\15\23\5\0\3\23"+
    "\1\0\7\23\17\0\4\24\32\0\5\24\20\0\2\23\23\0\1\23"+
    "\13\0\4\24\6\0\6\24\1\0\1\23\15\0\1\23\40\0\22\23"+
    "\36\0\15\24\4\0\1\24\3\0\6\24\27\0\1\23\4\0\1\23"+
    "\2\0\12\23\1\0\1\23\3\0\5\23\6\0\1\23\1\0\1\23"+
    "\1\0\1\23\1\0\4\23\1\0\3\23\1\0\7\23\3\0\3\23"+
    "\5\0\5\23\26\0\44\23\u0e81\0\3\23\31\0\11\23\6\24\1\0"+
    "\5\23\2\0\5\23\4\0\126\23\2\0\2\24\2\0\3\23\1\0"+
    "\137\23\5\0\50\23\4\0\136\23\21\0\30\23\70\0\20\23\u0200\0"+
    "\u19b6\23\112\0\u51a6\23\132\0\u048d\23\u0773\0\u2ba4\23\u215c\0\u012e\23\2\0"+
    "\73\23\225\0\7\23\14\0\5\23\5\0\1\23\1\24\12\23\1\0"+
    "\15\23\1\0\5\23\1\0\1\23\1\0\2\23\1\0\2\23\1\0"+
    "\154\23\41\0\u016b\23\22\0\100\23\2\0\66\23\50\0\15\23\3\0"+
    "\20\24\20\0\4\24\17\0\2\23\30\0\3\23\31\0\1\23\6\0"+
    "\5\23\1\0\207\23\2\0\1\24\4\0\1\23\13\0\12\24\7\0"+
    "\32\23\4\0\1\23\1\0\32\23\12\0\132\23\3\0\6\23\2\0"+
    "\6\23\2\0\6\23\2\0\3\23\3\0\2\23\3\0\2\23\22\0"+
    "\3\24\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\27\0\3\1\1\2\1\3\2\4\1\2\1\5\1\6"+
    "\2\7\1\6\1\10\1\2\1\11\1\12\1\13\2\14"+
    "\1\15\1\16\1\4\1\17\1\16\1\20\1\21\1\16"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\3\32\1\33\1\34\1\35\1\36\7\34\1\37\1\34"+
    "\1\40\1\34\1\41\7\34\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\3\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\2\62\1\64"+
    "\1\7\1\65\1\66\1\67\1\70\2\71\1\6\1\72"+
    "\1\73\1\74\1\75\1\76\1\75\1\77\1\100\1\75"+
    "\1\101\1\102\1\103\1\104\1\105\2\106\1\107\1\110"+
    "\1\111\3\112\1\113\1\114\1\115\1\100\2\116\1\117"+
    "\1\120\1\121\1\122\1\0\1\123\2\0\1\124\3\0"+
    "\1\125\2\0\1\126\40\0\1\127\5\0\1\130\5\0"+
    "\1\131\2\0\1\132\4\0\1\125\1\126\1\0\1\133"+
    "\6\0\1\134\12\0\1\135\26\0\1\136\1\131\1\132"+
    "\1\0\1\123\1\0\1\124\1\137\7\0\1\140\6\0"+
    "\1\141\2\0\1\142\5\0\1\143\4\0\1\144\10\0"+
    "\1\145\1\146\3\0\1\147\2\0\1\130\1\123\1\124"+
    "\7\0\1\150\4\0\1\151\5\0\1\152\3\0\1\153"+
    "\4\0\1\154\2\0\1\155\1\156\1\0\1\157\2\0"+
    "\1\160\1\130\10\0\1\161\5\0\1\162\1\0\1\163"+
    "\3\0\1\164\1\165\1\166\5\0\1\167\1\170\1\171"+
    "\2\0\1\172\2\0\1\173\7\0\1\174\5\0\1\175"+
    "\1\176\1\177\1\0\1\200\1\201\1\202\4\0\1\203"+
    "\4\0\1\204\2\0\1\205\1\206\1\207\1\210\1\211"+
    "\1\212";

  private static int [] zzUnpackAction() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3"+
    "\0\u04f8\0\u052d\0\u04c3\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636"+
    "\0\u04c3\0\u066b\0\u06a0\0\u06d5\0\u04c3\0\u070a\0\u070a\0\u073f"+
    "\0\u04c3\0\u04c3\0\u070a\0\u0774\0\u04c3\0\u07a9\0\u07de\0\u0813"+
    "\0\u04c3\0\u04c3\0\u0848\0\u04c3\0\u04c3\0\u04c3\0\u04c3\0\u04c3"+
    "\0\u04c3\0\u04c3\0\u087d\0\u04c3\0\u08b2\0\u08e7\0\u04c3\0\u04c3"+
    "\0\u091c\0\u04c3\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a"+
    "\0\u0a8f\0\u04c3\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd"+
    "\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u04c3\0\u0d0b\0\u0d40"+
    "\0\u04c3\0\u0d75\0\u0daa\0\u04c3\0\u04c3\0\u04c3\0\u04c3\0\u0ddf"+
    "\0\u0e14\0\u04c3\0\u0e49\0\u04c3\0\u0e7e\0\u04c3\0\u04c3\0\u04c3"+
    "\0\u0eb3\0\u0ee8\0\u0f1d\0\u04c3\0\u0f52\0\u0f87\0\u0fbc\0\u04c3"+
    "\0\u04c3\0\u0ff1\0\u1026\0\u105b\0\u04c3\0\u1090\0\u04c3\0\u04c3"+
    "\0\u10c5\0\u10fa\0\u04c3\0\u112f\0\u1164\0\u04c3\0\u04c3\0\u04c3"+
    "\0\u04c3\0\u04c3\0\u04c3\0\u070a\0\u04c3\0\u1199\0\u04c3\0\u04c3"+
    "\0\u11ce\0\u1203\0\u04c3\0\u04c3\0\u1238\0\u04c3\0\u04c3\0\u126d"+
    "\0\u04c3\0\u04c3\0\u04c3\0\u04c3\0\u12a2\0\u12d7\0\u130c\0\u1341"+
    "\0\u1376\0\u13ab\0\u0848\0\u13e0\0\u04c3\0\u08e7\0\u1415\0\u04c3"+
    "\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd"+
    "\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765"+
    "\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d"+
    "\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5"+
    "\0\u04c3\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28"+
    "\0\u1c5d\0\u1c92\0\u1164\0\u1cc7\0\u04c3\0\u1203\0\u1cfc\0\u04c3"+
    "\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u0848\0\u08e7\0\u1e05\0\u1e3a"+
    "\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2"+
    "\0\u2017\0\u204c\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a"+
    "\0\u21bf\0\u21f4\0\u2229\0\u225e\0\u2293\0\u22c8\0\u22fd\0\u2332"+
    "\0\u2367\0\u239c\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5\0\u24da"+
    "\0\u250f\0\u2544\0\u2579\0\u25ae\0\u25e3\0\u2618\0\u264d\0\u2682"+
    "\0\u04c3\0\u1164\0\u1203\0\u26b7\0\u1d31\0\u26ec\0\u1d9b\0\u2721"+
    "\0\u2756\0\u278b\0\u27c0\0\u27f5\0\u282a\0\u285f\0\u2894\0\u04c3"+
    "\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u299d\0\u29d2\0\u04c3\0\u2a07"+
    "\0\u2a3c\0\u04c3\0\u2a71\0\u2aa6\0\u2adb\0\u2b10\0\u2b45\0\u04c3"+
    "\0\u2b7a\0\u2baf\0\u2be4\0\u2c19\0\u04c3\0\u2c4e\0\u2c83\0\u2cb8"+
    "\0\u2ced\0\u2d22\0\u2d57\0\u2d8c\0\u2dc1\0\u04c3\0\u04c3\0\u2df6"+
    "\0\u2e2b\0\u2e60\0\u04c3\0\u2e95\0\u2eca\0\u264d\0\u04c3\0\u04c3"+
    "\0\u2eff\0\u2f34\0\u2f69\0\u2f9e\0\u2fd3\0\u3008\0\u303d\0\u04c3"+
    "\0\u3072\0\u30a7\0\u30dc\0\u3111\0\u04c3\0\u3146\0\u317b\0\u31b0"+
    "\0\u31e5\0\u321a\0\u04c3\0\u324f\0\u3284\0\u32b9\0\u04c3\0\u32ee"+
    "\0\u3323\0\u3358\0\u338d\0\u04c3\0\u33c2\0\u33f7\0\u04c3\0\u04c3"+
    "\0\u342c\0\u04c3\0\u3461\0\u3496\0\u04c3\0\u04c3\0\u34cb\0\u3500"+
    "\0\u3535\0\u356a\0\u359f\0\u35d4\0\u3609\0\u363e\0\u04c3\0\u3673"+
    "\0\u36a8\0\u36dd\0\u3712\0\u3747\0\u04c3\0\u377c\0\u04c3\0\u37b1"+
    "\0\u37e6\0\u381b\0\u04c3\0\u04c3\0\u04c3\0\u3850\0\u3885\0\u38ba"+
    "\0\u38ef\0\u3924\0\u04c3\0\u04c3\0\u04c3\0\u3959\0\u398e\0\u04c3"+
    "\0\u39c3\0\u39f8\0\u04c3\0\u3a2d\0\u3a62\0\u3a97\0\u3acc\0\u3b01"+
    "\0\u3b36\0\u3b6b\0\u04c3\0\u3ba0\0\u3bd5\0\u3c0a\0\u3c3f\0\u3c74"+
    "\0\u04c3\0\u04c3\0\u04c3\0\u3ca9\0\u04c3\0\u04c3\0\u04c3\0\u3cde"+
    "\0\u3d13\0\u3d48\0\u3d7d\0\u04c3\0\u3db2\0\u3de7\0\u3e1c\0\u3e51"+
    "\0\u04c3\0\u3e86\0\u3ebb\0\u04c3\0\u04c3\0\u04c3\0\u04c3\0\u04c3"+
    "\0\u04c3";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\30\1\31\4\32\57\30\1\33\1\34\2\35\1\36"+
    "\1\35\1\33\1\37\2\33\12\40\14\33\17\40\6\33"+
    "\2\41\2\42\1\43\1\42\1\41\1\44\21\41\1\45"+
    "\33\41\2\33\1\46\1\47\1\50\25\33\1\51\32\33"+
    "\2\52\1\53\1\47\1\54\60\52\2\55\2\56\1\57"+
    "\1\55\1\60\1\55\1\61\14\55\1\62\1\63\1\64"+
    "\1\61\2\55\1\65\1\66\1\67\1\70\26\55\2\71"+
    "\2\56\5\71\1\72\12\73\14\71\17\73\6\71\2\74"+
    "\2\56\2\74\1\75\17\74\1\76\10\74\1\77\25\74"+
    "\2\100\2\56\1\101\4\100\1\102\1\103\1\104\1\105"+
    "\1\106\1\100\1\107\1\100\1\110\1\111\2\100\1\112"+
    "\12\100\1\113\1\114\1\100\1\115\1\116\1\117\1\120"+
    "\1\121\5\100\1\122\1\100\1\123\1\124\1\125\5\100"+
    "\2\56\1\101\60\100\2\126\2\56\1\127\5\126\12\130"+
    "\14\126\17\130\6\126\2\131\2\56\1\132\5\131\12\133"+
    "\14\131\17\133\4\131\1\134\1\131\2\135\2\56\5\135"+
    "\1\136\13\135\1\112\37\135\1\137\1\140\4\141\57\137"+
    "\2\142\2\56\1\143\4\142\1\144\12\145\1\142\1\146"+
    "\12\142\17\145\4\142\1\147\1\142\2\150\2\56\1\151"+
    "\7\150\1\152\2\150\1\153\45\150\2\154\2\155\1\156"+
    "\5\154\12\157\14\154\17\157\4\154\1\160\1\161\2\41"+
    "\2\162\1\163\1\162\1\41\1\164\1\41\1\165\13\41"+
    "\1\166\3\41\1\167\33\41\2\170\2\155\1\171\1\170"+
    "\1\172\1\170\1\173\14\170\1\174\1\175\1\176\1\173"+
    "\2\170\1\177\1\200\1\201\1\202\26\170\2\203\1\204"+
    "\1\47\5\203\1\205\12\206\1\203\1\207\12\203\17\206"+
    "\6\203\2\210\2\155\2\210\1\211\17\210\1\212\10\210"+
    "\1\213\25\210\2\214\4\215\17\214\1\216\37\214\2\217"+
    "\4\220\3\217\1\221\13\217\1\222\37\217\66\0\1\223"+
    "\65\0\4\32\60\0\1\224\65\0\4\35\61\0\2\35"+
    "\1\36\1\35\1\0\1\225\64\0\1\226\1\227\66\0"+
    "\13\40\13\0\23\40\4\0\4\42\61\0\2\42\1\43"+
    "\1\42\1\0\1\230\64\0\1\231\1\232\56\0\2\47"+
    "\65\0\1\50\64\0\1\54\62\0\2\56\65\0\1\57"+
    "\60\0\2\55\2\0\61\55\2\233\2\0\2\233\1\234"+
    "\17\233\1\235\36\233\12\0\13\73\13\0\23\73\2\0"+
    "\2\74\2\0\61\74\2\236\2\0\2\236\1\237\17\236"+
    "\1\240\36\236\4\0\1\101\73\0\1\241\26\0\1\242"+
    "\11\0\1\243\26\0\1\244\67\0\1\245\33\0\1\246"+
    "\25\0\1\247\25\0\1\250\32\0\1\251\33\0\1\252"+
    "\61\0\1\253\3\0\1\254\27\0\1\255\70\0\1\256"+
    "\2\0\1\257\1\260\23\0\1\261\2\0\1\262\27\0"+
    "\1\263\23\0\1\264\11\0\1\265\33\0\1\266\24\0"+
    "\1\267\57\0\1\270\40\0\1\271\62\0\1\272\117\0"+
    "\1\273\6\0\1\274\64\0\1\275\56\0\1\276\64\0"+
    "\1\277\77\0\1\300\6\0\1\127\72\0\13\130\13\0"+
    "\23\130\6\0\1\132\72\0\13\133\13\0\23\133\13\0"+
    "\1\301\1\302\2\0\1\303\51\0\4\141\63\0\1\143"+
    "\72\0\13\145\13\0\23\145\6\0\1\151\130\0\1\304"+
    "\35\0\1\305\45\0\2\155\65\0\1\156\72\0\13\157"+
    "\13\0\23\157\4\0\4\162\61\0\2\162\1\163\1\162"+
    "\1\0\1\306\64\0\1\307\1\310\66\0\12\311\14\0"+
    "\17\311\12\0\1\171\60\0\2\170\2\0\61\170\12\0"+
    "\12\312\14\0\17\312\6\0\2\313\2\0\2\313\1\314"+
    "\17\313\1\315\36\313\12\0\13\206\13\0\23\206\2\0"+
    "\2\210\2\0\61\210\2\316\2\0\2\316\1\317\17\316"+
    "\1\320\36\316\2\0\4\215\61\0\4\220\66\0\1\226"+
    "\55\0\3\226\1\0\61\226\10\321\1\322\54\321\7\0"+
    "\1\231\55\0\3\231\1\0\61\231\10\323\1\324\54\323"+
    "\2\233\2\0\2\233\1\234\17\233\1\325\36\233\2\236"+
    "\2\0\2\236\1\237\17\236\1\326\36\236\12\0\1\327"+
    "\1\0\1\330\23\0\1\331\67\0\1\332\34\0\1\333"+
    "\65\0\1\334\117\0\1\335\60\0\1\336\40\0\1\337"+
    "\61\0\1\340\63\0\1\341\64\0\1\342\6\0\1\343"+
    "\54\0\1\344\113\0\1\345\36\0\1\346\73\0\1\347"+
    "\103\0\1\350\44\0\1\351\106\0\1\352\42\0\1\353"+
    "\64\0\1\354\64\0\1\355\55\0\1\356\112\0\1\357"+
    "\73\0\1\360\31\0\1\361\117\0\1\362\27\0\1\363"+
    "\71\0\1\364\66\0\1\365\60\0\1\366\4\0\1\367"+
    "\54\0\1\370\64\0\1\371\121\0\1\372\30\0\1\373"+
    "\67\0\1\374\114\0\1\375\40\0\1\376\51\0\1\307"+
    "\55\0\3\307\1\0\61\307\10\377\1\u0100\54\377\11\0"+
    "\1\41\13\311\13\0\23\311\13\0\1\u0101\13\312\13\0"+
    "\23\312\2\0\2\313\2\0\2\313\1\314\17\313\1\u0102"+
    "\36\313\2\316\2\0\2\316\1\317\17\316\1\u0103\36\316"+
    "\10\321\1\u0104\63\321\1\u0105\1\u0104\54\321\10\323\1\u0106"+
    "\63\323\1\u0107\1\u0106\54\323\14\0\1\u0108\65\0\1\u0109"+
    "\34\0\1\u010a\34\0\1\u010b\64\0\1\u010c\60\0\1\u010d"+
    "\114\0\1\u010e\40\0\1\u010f\57\0\1\u0110\63\0\1\u0111"+
    "\3\0\1\u0112\17\0\1\u0113\41\0\1\u0114\70\0\1\u0115"+
    "\103\0\1\u0116\46\0\1\u0117\105\0\1\u0118\35\0\1\u0119"+
    "\65\0\1\u011a\115\0\1\u011b\33\0\1\u011c\110\0\1\u011d"+
    "\64\0\1\u011e\3\0\1\u011f\67\0\1\u0120\27\0\1\u0121"+
    "\1\u0122\63\0\1\u0123\65\0\1\u0124\126\0\1\u0125\30\0"+
    "\1\u0126\63\0\1\u0127\111\0\1\u0128\56\0\1\u0129\43\0"+
    "\1\u012a\105\0\1\u012b\42\0\1\u012c\63\0\1\u012d\63\0"+
    "\1\u012e\64\0\1\u012f\62\0\1\u0130\64\0\1\u0131\71\0"+
    "\1\u0132\62\0\1\u0133\110\0\1\u0134\23\0\10\377\1\u0135"+
    "\63\377\1\u0136\1\u0135\54\377\7\321\1\u0137\1\u0104\54\321"+
    "\7\323\1\u0138\1\u0106\54\323\14\0\1\u0139\124\0\1\u013a"+
    "\60\0\1\u013b\62\0\1\u013c\33\0\1\u013d\117\0\1\u013e"+
    "\27\0\1\u013f\66\0\1\u0140\120\0\1\u0141\34\0\1\u0142"+
    "\65\0\1\u0143\55\0\1\u0144\73\0\1\u0145\56\0\1\u0146"+
    "\120\0\1\u0147\64\0\1\u0148\56\0\1\u0149\44\0\1\u014a"+
    "\103\0\1\u014b\100\0\1\u014c\24\0\1\u014d\114\0\1\u014e"+
    "\34\0\1\u014f\64\0\1\u0150\107\0\1\u0151\36\0\1\u0152"+
    "\66\0\1\u0153\124\0\1\u0154\26\0\1\u0155\63\0\1\u0156"+
    "\107\0\1\u0157\43\0\1\u0158\111\0\1\u0159\34\0\1\u015a"+
    "\64\0\1\u015b\61\0\1\301\6\0\1\u015c\61\0\1\u015d"+
    "\47\0\7\377\1\u015e\1\u0135\54\377\51\0\1\u015f\30\0"+
    "\1\u0160\70\0\1\u0161\110\0\1\u0162\61\0\1\u0163\37\0"+
    "\1\u0164\61\0\1\u0165\122\0\1\u0166\36\0\1\u0167\60\0"+
    "\1\u0168\113\0\1\u0169\31\0\1\u016a\64\0\1\u016b\73\0"+
    "\1\u016c\56\0\1\u016d\66\0\1\u016e\111\0\1\u016f\71\0"+
    "\1\u0170\36\0\1\u0171\113\0\1\u0172\65\0\1\u0173\53\0"+
    "\1\u0174\41\0\1\u0175\114\0\1\u0176\67\0\1\u0177\30\0"+
    "\1\u0178\61\0\1\301\74\0\1\u0179\113\0\1\u017a\64\0"+
    "\1\u017b\57\0\1\u017c\36\0\1\u017d\64\0\1\u017e\107\0"+
    "\1\u017f\70\0\1\u0180\36\0\1\u0181\107\0\1\u0182\64\0"+
    "\1\u0183\41\0\1\u0184\66\0\1\u0185\104\0\1\u0186\65\0"+
    "\1\u0187\71\0\1\u0188\40\0\1\u0189\112\0\1\u018a\31\0"+
    "\1\u018b\110\0\1\u018c\74\0\1\u018d\35\0\1\u015b\60\0"+
    "\1\u018e\61\0\1\u018f\72\0\1\u0190\115\0\1\u0191\27\0"+
    "\1\u0192\62\0\1\u0193\72\0\1\u0194\57\0\1\u0195\111\0"+
    "\1\u0196\77\0\1\u0197\26\0\1\u0198\64\0\1\u0199\60\0"+
    "\1\u019a\122\0\1\u019b\66\0\1\u019c\26\0\1\u019d\111\0"+
    "\1\u019e\37\0\1\u019f\63\0\1\u01a0\121\0\1\u01a1\67\0"+
    "\1\u01a2\27\0\1\u01a3\107\0\1\u01a4\40\0\1\u01a5\64\0"+
    "\1\u01a6\64\0\1\u01a7\64\0\1\u01a8\121\0\1\u01a9\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16112];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\27\0\1\11\2\1\1\11\5\1\1\11\3\1\1\11"+
    "\3\1\2\11\2\1\1\11\3\1\2\11\1\1\7\11"+
    "\1\1\1\11\2\1\2\11\1\1\1\11\7\1\1\11"+
    "\13\1\1\11\2\1\1\11\2\1\4\11\2\1\1\11"+
    "\1\1\1\11\1\1\3\11\3\1\1\11\3\1\2\11"+
    "\3\1\1\11\1\1\2\11\2\1\1\11\2\1\6\11"+
    "\1\1\1\11\1\1\2\11\2\1\2\11\1\1\2\11"+
    "\1\1\4\11\1\0\1\1\2\0\1\1\3\0\1\11"+
    "\2\0\1\11\40\0\1\11\5\0\1\1\5\0\1\11"+
    "\2\0\1\11\4\0\2\1\1\0\1\1\6\0\1\1"+
    "\12\0\1\1\26\0\1\11\2\1\1\0\1\1\1\0"+
    "\2\1\7\0\1\11\6\0\1\11\2\0\1\11\5\0"+
    "\1\11\4\0\1\11\10\0\2\11\3\0\1\11\2\0"+
    "\1\1\2\11\7\0\1\11\4\0\1\11\5\0\1\11"+
    "\3\0\1\11\4\0\1\11\2\0\2\11\1\0\1\11"+
    "\2\0\2\11\10\0\1\11\5\0\1\11\1\0\1\11"+
    "\3\0\3\11\5\0\3\11\2\0\1\11\2\0\1\11"+
    "\7\0\1\11\5\0\3\11\1\0\3\11\4\0\1\11"+
    "\4\0\1\11\2\0\6\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int braceCounter = 0;


  _JFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _JFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1764) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24: 
          { yybegin(IDENTIFIER_REGEXP); return JFlexElementTypes.REGEXP_RIGHT_BRACE;
          }
        case 139: break;
        case 110: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.YYEOF_KEYWORD;
          }
        case 140: break;
        case 22: 
          { yybegin(IDENTIFIER_REGEXP); return JFlexElementTypes.REGEXP_RIGHT_PARENTHESIS;
          }
        case 141: break;
        case 88: 
          { yybegin(RULE); return JFlexElementTypes.COMMENT;
          }
        case 142: break;
        case 20: 
          { yybegin(IDENTIFIER_REGEXP); return JFlexElementTypes.REGEXP_OR;
          }
        case 143: break;
        case 26: 
          { yybegin(IDENTIFIER_REGEXP_CLASS); return JFlexElementTypes.REGEXP_CLASS_SYMBOL;
          }
        case 144: break;
        case 122: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.NOTUNIX_KEYWORD;
          }
        case 145: break;
        case 60: 
          { yybegin(STATE); return JFlexElementTypes.STATE_RIGHT_ANGLE_BRACKET;
          }
        case 146: break;
        case 124: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.UNICODE_KEYWORD;
          }
        case 147: break;
        case 65: 
          { yybegin(ACTION_REGEXP); return JFlexElementTypes.REGEXP_PREFIX;
          }
        case 148: break;
        case 67: 
          { yybegin(ACTION_REGEXP); return JFlexElementTypes.REGEXP_OR;
          }
        case 149: break;
        case 89: 
          { yybegin(ACTION_REGEXP); return JFlexElementTypes.REGEXP_STRING_LITERAL;
          }
        case 150: break;
        case 91: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.INT_KEYWORD;
          }
        case 151: break;
        case 44: 
          { yybegin(OPT_EXCEPTION); return JFlexElementTypes.BAD_CHARACTER;
          }
        case 152: break;
        case 132: 
          { yybegin(OPT_PARAM); return JFlexElementTypes.SCANERROR_KEYWORD;
          }
        case 153: break;
        case 134: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.IGNORECASE_KEYWORD;
          }
        case 154: break;
        case 37: 
          { yybegin(OPT_PARAMS); return JFlexElementTypes.BAD_CHARACTER;
          }
        case 155: break;
        case 82: 
          { yybegin(LEXICAL_RULES); return JFlexElementTypes.SECTION_SIGN;
          }
        case 156: break;
        case 81: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.SECTION_SIGN;
          }
        case 157: break;
        case 78: 
          { yybegin(ACTION_JAVA_CODE); return JFlexElementTypes.JAVA_CODE;
          }
        case 158: break;
        case 99: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.CHAR_KEYWORD;
          }
        case 159: break;
        case 66: 
          { yybegin(ACTION_REGEXP_CLASS); return JFlexElementTypes.REGEXP_LEFT_BRACKET;
          }
        case 160: break;
        case 130: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.CUPDEBUG_KEYWORD;
          }
        case 161: break;
        case 18: 
          { yybegin(IDENTIFIER_REGEXP); return JFlexElementTypes.REGEXP_PREFIX;
          }
        case 162: break;
        case 80: 
          { braceCounter++; yybegin(ACTION_JAVA_CODE); return JFlexElementTypes.JAVA_CODE;
          }
        case 163: break;
        case 2: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.BAD_CHARACTER;
          }
        case 164: break;
        case 128: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.ABSTRACT_KEYWORD;
          }
        case 165: break;
        case 101: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes._7BIT_KEYWORD;
          }
        case 166: break;
        case 93: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.CUP_KEYWORD;
          }
        case 167: break;
        case 46: 
          { yybegin(OPT_EXCEPTION); return JFlexElementTypes.OPTION_RIGHT_BRACE;
          }
        case 168: break;
        case 117: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.PUBLIC_KEYWORD;
          }
        case 169: break;
        case 76: 
          { yybegin(RULE); return JFlexElementTypes.BAD_CHARACTER;
          }
        case 170: break;
        case 71: 
          { yybegin(ACTION_REGEXP); return JFlexElementTypes.REGEXP_RIGHT_BRACE;
          }
        case 171: break;
        case 19: 
          { yybegin(IDENTIFIER_REGEXP_CLASS); return JFlexElementTypes.REGEXP_LEFT_BRACKET;
          }
        case 172: break;
        case 54: 
          { yybegin(STATE); return JFlexElementTypes.STATE_REF;
          }
        case 173: break;
        case 133: 
          { yybegin(OPT_PARAMS); return JFlexElementTypes.IMPLEMENTS_KEYWORD;
          }
        case 174: break;
        case 119: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.INTEGER_KEYWORD;
          }
        case 175: break;
        case 136: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.STANDALONE_KEYWORD;
          }
        case 176: break;
        case 114: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.COLUMN_KEYWORD;
          }
        case 177: break;
        case 1: 
          { yybegin(YYINITIAL); return JFlexElementTypes.JAVA_CODE;
          }
        case 178: break;
        case 98: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.LINE_KEYWORD;
          }
        case 179: break;
        case 36: 
          { yybegin(OPT_PARAM); return JFlexElementTypes.OPTION_PARAMETER;
          }
        case 180: break;
        case 123: 
          { yybegin(OPT_PARAM); return JFlexElementTypes.EXTENDS_KEYWORD;
          }
        case 181: break;
        case 58: 
          { yybegin(LEXICAL_RULES); return JFlexElementTypes.RIGHT_BRACE;
          }
        case 182: break;
        case 113: 
          { yybegin(OPT_CODE); return JFlexElementTypes.EOFVAL_KEYWORD;
          }
        case 183: break;
        case 107: 
          { yybegin(OPT_PARAMS); return JFlexElementTypes.STATE_KEYWORD;
          }
        case 184: break;
        case 90: 
          { yybegin(ACTION_REGEXP_CLASS); return JFlexElementTypes.REGEXP_STRING_LITERAL;
          }
        case 185: break;
        case 115: 
          { yybegin(OPT_PARAM); return JFlexElementTypes.CUPSYM_KEYWORD;
          }
        case 186: break;
        case 85: 
          { yybegin(IDENTIFIER_REGEXP); return JFlexElementTypes.REGEXP_STRING_LITERAL;
          }
        case 187: break;
        case 92: 
          { yybegin(OPT_CODE); return JFlexElementTypes.EOF_KEYWORD;
          }
        case 188: break;
        case 43: 
          { yybegin(OPT_JAVA_CODE); return JFlexElementTypes.JAVA_CODE;
          }
        case 189: break;
        case 47: 
          { yybegin(OPT_EXCEPTION); return JFlexElementTypes.OPTION_PARAMETER;
          }
        case 190: break;
        case 116: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.SWITCH_KEYWORD;
          }
        case 191: break;
        case 112: 
          { yybegin(OPT_BOOLEAN); return JFlexElementTypes.FALSE_KEYWORD;
          }
        case 192: break;
        case 21: 
          { yybegin(IDENTIFIER_REGEXP); return JFlexElementTypes.REGEXP_LEFT_PARENTHESIS;
          }
        case 193: break;
        case 28: 
          { yybegin(OPT_ERROR); return JFlexElementTypes.BAD_CHARACTER;
          }
        case 194: break;
        case 5: 
          { yybegin(IDENTIFIER); return JFlexElementTypes.MACROS;
          }
        case 195: break;
        case 17: 
          { yybegin(IDENTIFIER_REGEXP_IDENTIFIER); return JFlexElementTypes.REGEXP_LEFT_BRACE;
          }
        case 196: break;
        case 29: 
          { yybegin(OPT_ERROR); return JFlexElementTypes.OPTION_WHITE_SPACE;
          }
        case 197: break;
        case 13: 
          { yybegin(IDENTIFIER_REGEXP_LITERAL); return JFlexElementTypes.WHITE_SPACE;
          }
        case 198: break;
        case 15: 
          { yybegin(IDENTIFIER_REGEXP); return JFlexElementTypes.REGEXP_WHITE_SPACE;
          }
        case 199: break;
        case 55: 
          { yybegin(STATE); return JFlexElementTypes.STATE_COMMA;
          }
        case 200: break;
        case 11: 
          { yybegin(IDENTIFIER_REGEXP_LITERAL); return JFlexElementTypes.EQ;
          }
        case 201: break;
        case 104: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.TABLE_KEYWORD;
          }
        case 202: break;
        case 95: 
          { yybegin(OPT_CODE); return JFlexElementTypes.INIT_KEYWORD;
          }
        case 203: break;
        case 87: 
          { yybegin(OPTIONS_AND_DECLARATIONS); yypushback(yylength());
          }
        case 204: break;
        case 86: 
          { yybegin(IDENTIFIER_REGEXP_CLASS); return JFlexElementTypes.REGEXP_STRING_LITERAL;
          }
        case 205: break;
        case 50: 
          { yybegin(OPT_BOOLEAN); return JFlexElementTypes.BAD_CHARACTER;
          }
        case 206: break;
        case 40: 
          { yybegin(OPT_PARAMS); return JFlexElementTypes.OPTION_COMMA;
          }
        case 207: break;
        case 102: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes._8BIT_KEYWORD;
          }
        case 208: break;
        case 53: 
          { yybegin(STATE); return JFlexElementTypes.WHITE_SPACE;
          }
        case 209: break;
        case 52: 
          { yybegin(STATE); return JFlexElementTypes.BAD_CHARACTER;
          }
        case 210: break;
        case 33: 
          { yybegin(OPT_PARAMS); return JFlexElementTypes.X_KEYWORD;
          }
        case 211: break;
        case 94: 
          { yybegin(ACTION_REGEXP_IDENTIFIER); yypushback(yylength());
          }
        case 212: break;
        case 105: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.FINAL_KEYWORD;
          }
        case 213: break;
        case 83: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.COMMENT;
          }
        case 214: break;
        case 97: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.FULL_KEYWORD;
          }
        case 215: break;
        case 79: 
          { braceCounter--; if (braceCounter < 0) {yybegin(RULE); return JFlexElementTypes.RIGHT_BRACE; } else { yybegin(ACTION_JAVA_CODE); return JFlexElementTypes.JAVA_CODE; }
          }
        case 216: break;
        case 84: 
          { yybegin(LEXICAL_RULES); return JFlexElementTypes.COMMENT;
          }
        case 217: break;
        case 62: 
          { yybegin(ACTION_REGEXP); return JFlexElementTypes.WHITE_SPACE;
          }
        case 218: break;
        case 51: 
          { yybegin(OPT_BOOLEAN); return JFlexElementTypes.OPTION_WHITE_SPACE;
          }
        case 219: break;
        case 56: 
          { yybegin(RULE); return JFlexElementTypes.STATE_LEFT_ANGLE_BRACKET;
          }
        case 220: break;
        case 69: 
          { yybegin(ACTION_REGEXP); return JFlexElementTypes.REGEXP_RIGHT_PARENTHESIS;
          }
        case 221: break;
        case 75: 
          { yybegin(ACTION_REGEXP); return JFlexElementTypes.REGEXP_RIGHT_BRACKET;
          }
        case 222: break;
        case 61: 
          { yybegin(ACTION_REGEXP); return JFlexElementTypes.REGEXP_SYMBOL;
          }
        case 223: break;
        case 77: 
          { yybegin(ACTION); return JFlexElementTypes.WHITE_SPACE;
          }
        case 224: break;
        case 70: 
          { yybegin(ACTION_REGEXP); return JFlexElementTypes.BAD_CHARACTER;
          }
        case 225: break;
        case 30: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.OPTION_RIGHT_BRACE;
          }
        case 226: break;
        case 108: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.DEBUG_KEYWORD;
          }
        case 227: break;
        case 38: 
          { yybegin(OPT_PARAMS); return JFlexElementTypes.OPTION_WHITE_SPACE;
          }
        case 228: break;
        case 45: 
          { yybegin(OPT_EXCEPTION); return JFlexElementTypes.OPTION_WHITE_SPACE;
          }
        case 229: break;
        case 25: 
          { yybegin(IDENTIFIER_REGEXP_IDENTIFIER); return JFlexElementTypes.REGEXP_MACROS_REF;
          }
        case 230: break;
        case 138: 
          { yybegin(OPT_EXCEPTION); return JFlexElementTypes.YYLEXTHROW_KEYWORD;
          }
        case 231: break;
        case 127: 
          { yybegin(OPT_PARAM); return JFlexElementTypes.FUNCTION_KEYWORD;
          }
        case 232: break;
        case 59: 
          { yybegin(RULE); return JFlexElementTypes.LEFT_BRACE;
          }
        case 233: break;
        case 137: 
          { yybegin(OPT_PARAM); return JFlexElementTypes.BUFFERSIZE_KEYWORD;
          }
        case 234: break;
        case 135: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.APIPRIVATE_KEYWORD;
          }
        case 235: break;
        case 125: 
          { yybegin(OPT_EXCEPTION); return JFlexElementTypes.EOFTHROW_KEYWORD;
          }
        case 236: break;
        case 63: 
          { yybegin(ACTION_REGEXP); return JFlexElementTypes.REGEXP_POSTFIX;
          }
        case 237: break;
        case 120: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.INTWRAP_KEYWORD;
          }
        case 238: break;
        case 121: 
          { yybegin(OPT_PARAM); return JFlexElementTypes.INCLUDE_KEYWORD;
          }
        case 239: break;
        case 73: 
          { yybegin(ACTION_REGEXP_IDENTIFIER); return JFlexElementTypes.REGEXP_LEFT_BRACE;
          }
        case 240: break;
        case 49: 
          { yybegin(OPT_EXCEPTION); return JFlexElementTypes.OPTION_COMMA;
          }
        case 241: break;
        case 27: 
          { yybegin(IDENTIFIER_REGEXP); return JFlexElementTypes.REGEXP_RIGHT_BRACKET;
          }
        case 242: break;
        case 31: 
          { yybegin(OPT_JAVA_CODE); return JFlexElementTypes.OPTION_LEFT_BRACE;
          }
        case 243: break;
        case 12: 
          { yybegin(IDENTIFIER_REGEXP); yypushback(yylength());
          }
        case 244: break;
        case 106: 
          { yybegin(OPT_PARAM); return JFlexElementTypes.CLASS_KEYWORD;
          }
        case 245: break;
        case 14: 
          { yybegin(IDENTIFIER_REGEXP); return JFlexElementTypes.REGEXP_SYMBOL;
          }
        case 246: break;
        case 23: 
          { yybegin(IDENTIFIER_REGEXP); return JFlexElementTypes.BAD_CHARACTER;
          }
        case 247: break;
        case 8: 
          { yybegin(STATE); return JFlexElementTypes.STATE_LEFT_ANGLE_BRACKET;
          }
        case 248: break;
        case 35: 
          { yybegin(OPT_PARAM); return JFlexElementTypes.OPTION_WHITE_SPACE;
          }
        case 249: break;
        case 64: 
          { braceCounter = 0; yybegin(ACTION_JAVA_CODE); return JFlexElementTypes.LEFT_BRACE;
          }
        case 250: break;
        case 57: 
          { yybegin(RULE); return JFlexElementTypes.WHITE_SPACE;
          }
        case 251: break;
        case 111: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes._16BIT_KEYWORD;
          }
        case 252: break;
        case 103: 
          { yybegin(OPT_BOOLEAN); return JFlexElementTypes.TRUE_KEYWORD;
          }
        case 253: break;
        case 74: 
          { yybegin(ACTION_REGEXP_CLASS); return JFlexElementTypes.REGEXP_CLASS_SYMBOL;
          }
        case 254: break;
        case 109: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.BYACC_KEYWORD;
          }
        case 255: break;
        case 7: 
          { yybegin(LEXICAL_RULES); return JFlexElementTypes.WHITE_SPACE;
          }
        case 256: break;
        case 126: 
          { yybegin(OPT_BOOLEAN); return JFlexElementTypes.EOFCLOSE_KEYWORD;
          }
        case 257: break;
        case 32: 
          { yybegin(OPT_PARAMS); return JFlexElementTypes.S_KEYWORD;
          }
        case 258: break;
        case 96: 
          { yybegin(OPT_PARAM); return JFlexElementTypes.TYPE_KEYWORD;
          }
        case 259: break;
        case 100: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.PACK_KEYWORD;
          }
        case 260: break;
        case 34: 
          { yybegin(OPT_PARAM); return JFlexElementTypes.BAD_CHARACTER;
          }
        case 261: break;
        case 10: 
          { yybegin(IDENTIFIER); return JFlexElementTypes.WHITE_SPACE;
          }
        case 262: break;
        case 39: 
          { yybegin(OPT_PARAMS); return JFlexElementTypes.OPTION_PARAMETER;
          }
        case 263: break;
        case 3: 
          { yybegin(OPTION); return JFlexElementTypes.OPTION_SIGN;
          }
        case 264: break;
        case 16: 
          { yybegin(IDENTIFIER_REGEXP); return JFlexElementTypes.REGEXP_POSTFIX;
          }
        case 265: break;
        case 9: 
          { return JFlexElementTypes.WHITE_SPACE;
          }
        case 266: break;
        case 129: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.CASELESS_KEYWORD;
          }
        case 267: break;
        case 6: 
          { yybegin(ACTION_REGEXP); yypushback(yylength());
          }
        case 268: break;
        case 41: 
          { yybegin(OPT_CODE); return JFlexElementTypes.BAD_CHARACTER;
          }
        case 269: break;
        case 68: 
          { yybegin(ACTION_REGEXP); return JFlexElementTypes.REGEXP_LEFT_PARENTHESIS;
          }
        case 270: break;
        case 42: 
          { yybegin(OPT_CODE); return JFlexElementTypes.OPTION_RIGHT_BRACE;
          }
        case 271: break;
        case 4: 
          { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.WHITE_SPACE;
          }
        case 272: break;
        case 72: 
          { yybegin(ACTION_REGEXP_IDENTIFIER); return JFlexElementTypes.REGEXP_MACROS_REF;
          }
        case 273: break;
        case 48: 
          { yybegin(OPT_EXCEPTION); return JFlexElementTypes.OPTION_LEFT_BRACE;
          }
        case 274: break;
        case 131: 
          { yybegin(OPT_EXCEPTION); return JFlexElementTypes.INITTHROW_KEYWORD;
          }
        case 275: break;
        case 118: 
          { yybegin(OPT_PARAMS); return JFlexElementTypes.XSTATE_KEYWORD;
          }
        case 276: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
